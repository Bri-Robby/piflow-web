server.port=6001
server.servlet.context-path=/piflow-web
server.servlet.session.timeout=600

syspara.videoName=yangli.mp4
syspara.imagesPath=/home/nature/IdeaProjects/piflow/image/
syspara.videosPath=/home/nature/IdeaProjects/piflow/video/
syspara.xmlPath=/home/nature/IdeaProjects/piflow/xml/
syspara.interfaceUrlHead=http://10.0.86.191:8002
syspara.isLoadStop=true
syspara.syncProcessCron=0/5 * * * * ?


spring.flyway.baselineOnMigrate=true
# Location of SQL file
spring.flyway.locations=classpath:db/

# data source
# 基本属性
spring.datasource.name=dev
spring.datasource.url = jdbc:mysql://127.0.0.1:3306/piflow_web?useUnicode=true&characterEncoding=UTF-8&useSSL=false&allowMultiQueries=true&autoReconnect=true&failOverReadOnly=false
spring.datasource.username=root
spring.datasource.password=123456
# 可以不配置，根据url自动识别，建议配置
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
###################以下为druid增加的配置###########################
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
# 初始化连接池个数
spring.datasource.initialSize=5
# 最小连接池个数——》已经不再使用，配置了也没效果
spring.datasource.minIdle=2
# 最大连接池个数
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间，单位毫秒，缺省启用公平锁，并发效率会有所下降
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
# 用来检测连接是否有效的sql，要求是一个查询语句。
# 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用
spring.datasource.validationQuery=SELECT 1 FROM DUAL
# 建议配置为true，不影响性能，并且保证安全性。
# 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.testWhileIdle=true
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
spring.datasource.testOnBorrow=false
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 通过别名的方式配置扩展插件，多个英文逗号分隔，常用的插件有：
# 监控统计用的filter:stat
# 日志用的filter:log4j
# 防御sql注入的filter:wall
spring.datasource.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据



# template engine thymeleaf
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML5
spring.thymeleaf.encoding=UTF-8

#Hot deployment files, pages do not generate caches, timely updates
spring.thymeleaf.cache=false
spring.resources.chain.strategy.content.enabled=true
spring.resources.chain.strategy.content.paths=/**


# Configuring static resources
spring.mvc.view.prefix=/templates/
spring.mvc.view.suffix=.html
spring.mvc.static-path-pattern=/**


# Configuration automatic table building: updata: no table new, table update operation, console display table building statement
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.open-in-view=true

#Hibernate defaults to create a MySQL table in Springboot that is MyISAM engine and is specified as InnoDB because it does not support things.
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect


# integration mybatis
mybatis.type-aliases-package=com.nature.**.model
#Open Hump Mapping
mybatis.configuration.map-underscore-to-camel-case=true
#Turn on lazy loading
#Global settings are lazy to load. If set to `false', all associations are initially loaded.
mybatis.configuration.lazy-loading-enabled=true
#When set to'true', lazy objects may be loaded by all of the lazy attributes. Otherwise, each attribute is loaded on demand.
mybatis.configuration.aggressive-lazy-loading=false

# Log Coordination Standard
logging.level.com.nature.mapper=debug
logging.level.root=info
logging.level.org.springframework.security=info

# Log Coordination. XML
#logging.config.classpath=log4j2.xml
